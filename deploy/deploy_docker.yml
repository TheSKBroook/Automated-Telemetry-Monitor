---
# Step 1: Check and install docker 
- name: Installation of docker
  become: true
  block:  

  - name: Check if Docker is installed
    command: docker --version
    register: docker_installed
    ignore_errors: yes

  - name: Install Docker prerequisites and Docker only if not installed
    block:
      - name: Install dependencies for Docker
        apt:
          name: 
            - ca-certificates
            - curl
            - gnupg
          state: present
          update_cache: yes

      - name: Create Docker keyrings directory
        file:
          path: /etc/apt/keyrings
          state: directory
          mode: '0755'

      - name: Add Docker's official GPG key
        command: curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        args:
          creates: /etc/apt/keyrings/docker.asc

      - name: Ensure Docker GPG key has correct permissions
        file:
          path: /etc/apt/keyrings/docker.asc
          mode: '0644'

      - name: Add Docker repository
        shell: |
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null
        args:
          creates: /etc/apt/sources.list.d/docker.list

      - name: Update package index
        apt:
          update_cache: yes

      - name: Install Docker and related tools
        apt:
          name: 
            - docker-ce
            - docker-ce-cli
            - containerd.io
            - docker-buildx-plugin
            - docker-compose-plugin
          state: present
    when: docker_installed is failed

# Step 2: Check for Required Docker Images for host
- name: Setting up docker images
  become: true
  block:

  - name: Ensure Docker images are present
    shell: docker images | grep {{ item }} | awk '{print $1}'
    with_items:
      - prom/prometheus
      - grafana/grafana
      - prom/alertmanager
    ignore_errors: yes
    register: image_check

  - name: Pull missing Docker images
    shell: docker pull {{ item }}
    with_items:
      - prom/prometheus
      - grafana/grafana
      - prom/alertmanager
    when: item not in image_check.results | map(attribute='stdout') | list

# Step 3: Writing Config
- name: Deployment configuration
  block:

  - name: Gather target information from inventory
    set_fact:
      host: "{{ ( groups['local'] ) | map('extract', hostvars, 'ansible_host') | list }}"
      targets: "{{ ( groups['targets'] ) | map('extract', hostvars, 'ansible_host') | list }}"
      line_token: "{{ hostvars['localhost']['token'] }}"
      
  - name: Generate Prometheus configuration file
    template:
      src: docker/prometheus/prometheus.yml.j2
      dest: docker/prometheus/prometheus.yml
    vars:
      host_ip: "{{ host[0] }}"
      ips: "{{ targets }}"  # Pass all targets after the first one

  - name: Generate alertmanager configuration file
    template:
      src: docker/alertmanager/alertmanager.yml.j2
      dest: docker/alertmanager/alertmanager.yml
    vars:
      webhook_ip: "{{ host[0] }}"
      line_token: "{{ line_token }}"
  
  - name: open all the docker
    shell:
      cmd: docker-compose up -d&
      chdir: ./docker
